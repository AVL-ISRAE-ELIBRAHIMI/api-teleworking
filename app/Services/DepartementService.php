<?php

namespace App\Services;

use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;
use Carbon\CarbonPeriod;

class DepartementService
{
    /**
     * Statistiques globales des rÃ©servations (RH / ADMIN)
     */
    //par deparetement
    // public function reservationsStats()
    // {
    //     $currentMonth = Carbon::now();
    //     $nextMonth = Carbon::now()->addMonth();

    //     // Totaux fixes par dÃ©partement (places disponibles)
    //     $totals = [
    //         'ESW' => 56,
    //         'VSP' => 56,
    //         'MDS' => 40,
    //     ];

    //     // ğŸ”¹ DÃ©finir les bornes de la pÃ©riode (1er jour du mois courant â†’ dernier jour du mois prochain)
    //     $startDate = $currentMonth->copy()->startOfMonth();
    //     $endDate = $nextMonth->copy()->endOfMonth();

    //     // ğŸ”¹ RÃ©cupÃ©ration des rÃ©servations groupÃ©es par jour et dÃ©partement
    //     $stats = DB::table('departements')
    //         ->leftJoin('places', 'departements.id', '=', 'places.departement_id')
    //         ->leftJoin('reservations', function ($join) use ($startDate, $endDate) {
    //             $join->on('places.id', '=', 'reservations.place_id')
    //                 ->whereBetween('reservations.date_reservation', [$startDate, $endDate]);
    //         })
    //         ->whereIn('departements.id', [1, 2, 3])
    //         ->selectRaw("
    //         departements.label as departement_name,
    //         DATE(reservations.date_reservation) as day,
    //         COUNT(reservations.id) as total_reservations
    //     ")
    //         ->groupBy('departements.label', 'day')
    //         ->orderBy('day')
    //         ->get();

    //     // ğŸ”¹ GÃ©nÃ©rer la liste complÃ¨te des jours entre les deux mois
    //     $days = [];
    //     $period = CarbonPeriod::create($startDate, $endDate);
    //     foreach ($period as $date) {
    //         $days[] = $date->format('Y-m-d');
    //     }

    //     // ğŸ”¹ Structure de sortie
    //     $result = [
    //         'days' => $days,
    //         'departments' => [],
    //     ];

    //     // Initialisation Ã  0% pour chaque jour
    //     foreach ($totals as $depName => $totalPlaces) {
    //         foreach ($days as $day) {
    //             $result['departments'][$depName][$day] = 0;
    //         }
    //     }

    //     // ğŸ”¹ Calcul du pourcentage par jour et dÃ©partement
    //     foreach ($stats as $row) {
    //         $depName = $row->departement_name;
    //         $totalPlaces = $totals[$depName] ?? 0;
    //         $percent = $totalPlaces > 0 ? round(($row->total_reservations / $totalPlaces) * 100, 2) : 0;

    //         if (isset($result['departments'][$depName][$row->day])) {
    //             $result['departments'][$depName][$row->day] = $percent;
    //         }
    //     }

    //     return $result;
    // }

    //total
    public function reservationsStats()
    {
        $currentMonth = Carbon::now();
        $nextMonth = Carbon::now()->addMonth();

        // ğŸ”¹ Totaux fixes par dÃ©partement (places disponibles)
        $totals = [
            'ESW' => 56,
            'VSP' => 56,
            'MDS' => 40,
        ];

        // ğŸ”¹ Total global de places
        $totalPlacesGlobal = array_sum($totals); // = 152

        // ğŸ”¹ DÃ©finir la pÃ©riode (mois courant â†’ mois prochain)
        $startDate = $currentMonth->copy()->startOfMonth();
        $endDate = $nextMonth->copy()->endOfMonth();

        // ğŸ”¹ RÃ©cupÃ©ration des rÃ©servations groupÃ©es par jour (tous dÃ©partements confondus)
        $stats = DB::table('reservations')
            ->join('places', 'reservations.place_id', '=', 'places.id')
            ->join('departements', 'places.departement_id', '=', 'departements.id')
            ->whereIn('departements.id', [1, 2, 3])
            ->whereBetween('reservations.date_reservation', [$startDate, $endDate])
            ->selectRaw("
            DATE(reservations.date_reservation) as day,
            COUNT(reservations.id) as total_reservations
        ")
            ->groupBy('day')
            ->orderBy('day')
            ->get();

        // ğŸ”¹ GÃ©nÃ©rer tous les jours de la pÃ©riode
        $days = [];
        $period = CarbonPeriod::create($startDate, $endDate);
        foreach ($period as $date) {
            $days[] = $date->format('Y-m-d');
        }

        // ğŸ”¹ Structure du rÃ©sultat
        $result = [
            'days' => $days,
            'percentages' => [],
        ];

        // Initialisation Ã  0% pour chaque jour
        foreach ($days as $day) {
            $result['percentages'][$day] = 0;
        }

        // ğŸ”¹ Calcul du pourcentage global par jour
        foreach ($stats as $row) {
            $percent = $totalPlacesGlobal > 0
                ? round(($row->total_reservations / $totalPlacesGlobal) * 100, 2)
                : 0;

            if (isset($result['percentages'][$row->day])) {
                $result['percentages'][$row->day] = $percent;
            }
        }

        return $result;
    }



    /**
     * Statistiques journaliÃ¨res pour un utilisateur STL (uniquement son dÃ©partement)
     */

    public function reservationsStatsSTL()
    {
        $user = Auth::user();

        if (!$user->hasRole('STL')) {
            throw new \Exception('AccÃ¨s non autorisÃ©');
        }

        $departementId = $user->departement_id;
        $depName = DB::table('departements')->where('id', $departementId)->value('label');

        // ğŸ”¹ DÃ©finir la pÃ©riode : du dÃ©but du mois courant Ã  la fin du mois prochain
        $currentMonth = Carbon::now();
        $nextMonth = Carbon::now()->addMonth();
        $startDate = $currentMonth->copy()->startOfMonth();
        $endDate = $nextMonth->copy()->endOfMonth();

        // ğŸ”¹ Totaux fixes (places disponibles)
        $totals = [
            'ESW' => 56,
            'VSP' => 56,
            'MDS' => 40,
        ];

        // ğŸ”¹ RÃ©cupÃ©ration des rÃ©servations par jour pour ce dÃ©partement
        $stats = DB::table('departements')
            ->leftJoin('places', 'departements.id', '=', 'places.departement_id')
            ->leftJoin('reservations', function ($join) use ($startDate, $endDate) {
                $join->on('places.id', '=', 'reservations.place_id')
                    ->whereBetween('reservations.date_reservation', [$startDate, $endDate]);
            })
            ->where('departements.id', $departementId)
            ->selectRaw("
            DATE(reservations.date_reservation) as day,
            COUNT(reservations.id) as total_reservations
        ")
            ->groupBy('day')
            ->orderBy('day')
            ->get();

        // ğŸ”¹ GÃ©nÃ©rer tous les jours de la pÃ©riode
        $days = [];
        $period = CarbonPeriod::create($startDate, $endDate);
        foreach ($period as $date) {
            $days[] = $date->format('Y-m-d');
        }

        // ğŸ”¹ Structure du rÃ©sultat
        $result = [
            'department' => $depName,
            'days' => $days,
            'percentages' => [],
        ];

        // Initialisation Ã  0%
        foreach ($days as $day) {
            $result['percentages'][$day] = 0;
        }

        // ğŸ”¹ Calcul du pourcentage par jour
        $totalPlaces = $totals[$depName] ?? 0;
        foreach ($stats as $row) {
            if ($row->day && $totalPlaces > 0) {
                $percent = round(($row->total_reservations / $totalPlaces) * 100, 2);
                $result['percentages'][$row->day] = $percent;
            }
        }

        return $result;
    }
}
